// :::: HOOKS :::: // 

- Son funciones que incorporan nuevas herramientas en un componente,
como por ejemplo la capacidad de tener estado, ciclos de vida, etc.
- Los HOOKS nunca van fuera de un componente, siempre van dentro del componente que quieras 
adapatar. Si quiero que algo tenga un "estado", es dentro del mismo que tengo que usar useState
- Para incorporara varios estados dentro del componente, tengo que ejecutar useState tantas veces sea necesario
- useState nos devuelve un arreglo/array, dicho arreglo va contener dos valores:
    1. El valor inicial del estado
    2. El 2do valor va contener una funcion que permite actualizar el estado, es decir que la funcion reemplaza al 
    estado anterior [valor inicial, funcion]

1) solo van dentro de un componente
2) No pueden estar dentro de condicionales
3) siempre tienen que estar ejecutados

// :::: OPERADOR TERNARIO :::: //

condicion ? retorna esto if true : o esto if false

// :::: CLASE COMPLEMENTARIA  :::: //

cuando uso el set, por ejemplo:

setAlgo(?)
es lo mismo que:
Algo = ?

Set lo utilizo para asignar un valor.

// :::: USE EFFECTT  :::: //

skeletons ? (investigar)

1) El useEffect siempre se ejecuta luego de renderizar
2) Nos permite ejecutar una funcion despues de cada renderizacion

// :::: PROMISE  :::: //

1) Es un objeto
2) Describe en que estado esta una operacion
3) si la promesa sale bien ejecuta promesa.then y si sale mal ejecuta promesa.catch

Nos notifica si un algo termino o si termino bien o mal

el 99% de las veces las promesas se ejecutan automaticamente para notificarme 

cuando la promesa se ejecuta ahi puedo utilizar:
.then(()=> {
    console.log("Salio bien")
})
.cath(()=> {})

// :::: API  :::: //

FETCH : Le das una direccion url/ip o una ruta y las condiciones de la peticion a traves de ciertos de protocolos

FTP : File transfer protocol
POP/IMAP/SMTP : Protocolo de correo
SSH: Secure shell
HTTP/S : Protocolo de comunicacion

REQUEST(CLIENTE)

URL/IP - METODO (GET/POST/DELETE/PUT) (Sirve para decirle al servidor cual es mi intencion) - version - headers - body

Tipos de headers:
content-type : aplication/json
content-length : 12390348789

Body es el objeto en si

RESPONSE(SERVIDOR)


Asi se escribe la solicitudes:

fetch("https://fakestoreapi.com/products")

fetch("https://fakestoreapi.com/products"),{
    method: "POST",
    headers: {
        "Content-Type": "application/json"
    },
    body: JSON.stringify{nombre:"usuario1", password:"123"}
}

1) Hago el pedido con Fetch : como va tardar me da una promesa, por eso el .then / .catch
fetch("https://fakestoreapi.com/products")
.then((respuesta)=>{
    console.log(respuesta)
    console.log("termino el pedido")
})
.catch((Error=>{
    console.log("hubo un error")
}))

useEffect

Permite dejar una tarea pesada para renderizar "despues" sin bloquear el DOM, y por este motivo,
en la espera de la ejecucion de la misma, mostrarle algo al usuario. Por ejemplo: "Loader", "Cargando", 
"Buscando", etc. Y asi darle la sensacion de que esta pasando algo en la web al usuario. 
Cuando el useEffect encuentra que hubo un cambio, el componente se vuelve a ejecutar/montar.


